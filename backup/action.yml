name: 'Checkout'
description: 'Checks out the repository with application credentials, reusable for other github.com checkouts'
inputs:
  topic:
    description: 'Filter repositories by topic'
    required: false
  app_id:
    description: 'GitHub App id for cloning the repositories'
    required: false
  installation_id:
    description: 'GitHub App installation id for cloing the repositories'
    required: false
  private_key:
    description: 'GitHub App private key for cloning the repositories'
    required: true
  artifact_enabled:
    description: 'Upload backup as artifact in current repository'
    default: 'false'
    required: false
  artifact_retention:
    description: 'Retention period for locally stored artifacts'
    default: '7'
    required: false
  gcp_enabled:
    description: 'Upload backup artifact to Google Cloud Storage, requires gcp_bucket and gcp_sa_key input parameters'
    required: false
    default: 'false'
  gcp_bucket:
    description: 'Google Cloud Storage bucket id to which the backup artifact is uploaded'
    required: false
  gcp_wip:
    description: 'Workload Identity Provider for authentication'
    required: false
  gcp_wip_sa:
    description: 'Service Account used to store backup to Google Cloud Storage'
    required: false
  aws_enabled:
    description: 'Upload backup artifact to AWS S3, requires aws_region, aws_access_key_id, aws_secret_access_key and aws_s3 as input parameters'
    required: false
    default: 'false'
  aws_region:
    description: 'AWS region for authentication and S3'
    required: false
  aws_access_key_id:
    description: 'AWS access key id'
    required: false
  aws_secret_access_key:
    description: 'AWS secret access key'
    required: false
  aws_s3:
    description: 'AWS S3 bucket name'
    required: false

runs:
  using: 'composite'
  steps:
  - id: create-token
    uses: tpokki/github-actions/token@4693cff68dde8a0893c8ffbf64b5875ff47113a0
    with:
      app_id: ${{ inputs.app_id }}
      installation_id: ${{ inputs.installation_id }}
      private_key: ${{ inputs.private_key }}

  - uses: tpokki/github-actions/list-repos@v4
    id: list-repos
    with:
      GITHUB_TOKEN: ${{ steps.create-token.outputs.token }}
      extractedField: clone_url
      topic: ${{ inputs.topic }}

  - shell: bash
    run: |
      git config --global url."https://x-access-token:${{ steps.create-token.outputs.token }}@github.com".insteadOf https://github.com
      git config --global user.name github-actions
      git config --global user.email github-actions@github.com

  - shell: bash
    id: create-archive
    run: |
      cd ${RUNNER_TEMP}
      DATE=$(date "+%Y%m%d%H%M%S")
      mkdir ${DATE}

      cd ${DATE}/
      echo ${{ steps.list-repos.outputs.repos }} | tr , \\\n | while read repo_url; do
        git clone --bare ${repo_url}
      done
      cd ../

      tar czf ${DATE}.tar.gz ${DATE}/
      echo ::set-output name=archive_name::${DATE}.tar.gz
      echo ::set-output name=archive_file::${RUNNER_TEMP}/${DATE}.tar.gz

  - if: inputs.artifact_enabled == 'true'
    name: Upload backup as artifact
    uses: actions/upload-artifact@v4
    with:
      name: ${{ steps.create-archive.outputs.archive_name }}
      path: ${{ steps.create-archive.outputs.archive_file }}
      retention-days: ${{ inputs.artifact_retention }}

  - if: inputs.gcp_enabled == 'true'
    name: Authenticate to Google Cloud
    uses: google-github-actions/auth@v0
    id: auth
    with:
      workload_identity_provider: ${{ inputs.gcp_wip }}
      service_account: ${{ inputs.gcp_wip_sa }}

  - if: inputs.gcp_enabled == 'true'
    name: Store Backup to GCP
    id: upload-files-to-gcp
    uses: 'google-github-actions/upload-cloud-storage@v0.5.0'
    with:
      path: ${{ steps.create-archive.outputs.archive_file }}
      destination: ${{ inputs.gcp_bucket }}
      gzip: false
      headers: |-
        content-type: application/x-tar

  - if: inputs.aws_enabled == 'true'
    name: Configure AWS Credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ inputs.aws_access_key_id }}
      aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
      aws-region: ${{ inputs.aws_region }}

  - if: inputs.aws_enabled == 'true'
    name: Store Backup to AWS
    shell: bash
    run: |
      aws s3 cp ${{ steps.create-archive.outputs.archive_file }} s3://${{ inputs.aws_s3 }}/${{ steps.create-archive.outputs.archive_name }}